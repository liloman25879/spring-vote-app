import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import json
import os
from datetime import datetime
import uuid
import requests
import base64

# Configuration de la page
st.set_page_config(
    page_title="SPRING - Vote Collaboratif Cloud",
    page_icon="üó≥Ô∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Descriptions r√©elles des t√¢ches - correspondance exacte avec le CSV
DESCRIPTIONS_REELLES = {
    "Caract√©ristique hydraulique de la T8": "AU LABO : caract√©risation Delta P vs d√©bit, gap voir production (fr√©quence, tension), densit√© gaz. Permet de d√©risquer le pilotage en pression de SPRING. Comprendre l'impact du GAP et de la pr√©sence plasma, du gaz de plasmalyse (micro d√©flagration CO2). Monter un PT √† la place du TT, faire des calculs de perte de charge sur les conduites 6 mm.",
    "Bouclage bilan mati√®re": "Acquisitions de m√©thodes n√©cessaires pour SPRING (bras mort / formules, outils de mesure - d√©bitm√®tre basse pression). - Trouver et installer un d√©bit m√®tre volumique - Automatiser le calcul massique avec le MADUR - Mettre des pesons sur le four remont√©s dans l'automate. - Interpr√©ter les r√©sultats : bouclage Carbone et bouclage Hydrog√®ne. Rendements avec et sans plasmalyse. Accumulation de goudrons qui sont ensuite craqu√©s. Estimation du volume de carbone produit. Efficacit√© des m√©canismes de r√©g√©n√©ration type BOUDOUARD",
    "Approche empirique des adsorptions H2 dans les r√©fractaires": "Comprendre le temps n√©cessaire pour d√©sorber l'hydrog√®ne du four.",
    "Effet Lensing sur la T8": "Comprendre les conditions d'apparition d'un plasma focalis√© (d√©faut de parall√©lisme des √©lectrodes, modification du gap, apparition de pont de carbone, d√©faut de concentricit√© des √©lectrodes, encrassement). Enjeux : - Ablation des √©lectrodes, - Taux de conversion - Mixing - Faux positif sur la d√©tection pont de carbone. T√¢che de fond OPS. Besoin de cathodes nickel.",
    "Comprendre l'√©rosion des √©lectrodes vs l'√©coulement": "On est pass√© d'une cathode concave √† une cathode convexe avec la T8. Est-ce li√© au refroidissement central de la T8? Int√©ressant pour SPRING : - Augmenter le d√©bit? - Diminuer la section du gaz? - Percer la cathode? - √âlectrode en tiges de cuivre pour avoir une √©rosion plus rapide que le tungsten? - Trouver les param√®tres plasma. - Param√®tre du gaz de plasmalyse (CO2) - Cathode gros diam√®tre pour √©viter les pbs de concentricit√© - Cathode trou√©e - Cathode massique en carbone",
    "Fiabilit√© PDR et MTBF": "Enregistreur d'√©v√®nements. D√©tecter les points faibles de la T8 pour SPRING. Modif cockpit : suivi des pi√®ces d'usure + le calcul et le dashboarding des heures et param√®tres de production. Upgrade du lab√©liseur d'√©v√®nement : lab√©liseur de maintenance. Ronde interm√©diaire (test de la cathode ajustable)",
    "Mesure UI : impact r√©gulation plasma sur le couple T8 GF1R0": "Temps de mise en ≈ìuvre. Important avec beaucoup d'interface. APPRENTISSAGE SPRING",
    "R√©g√©n√©ration m√©canique des ponts de carbones": "Le CO2 ne sera peut-√™tre pas possible sur SPRING (impacte la qualit√© carbone). Il faudra une solution m√©canique. Complexit√© importante et potentiellement changement de l'AF.",
    "Mobilit√© carbone vs temp√©rature de peau vs surface": "Thermofor√®se - LABO - utiliser le pr√©chauffeur et le g√©n√©rateur de flux sale pour faire des tests. Tester le teflon.",
    "R√©g√©n√©ration pont de carbone H2": "Pour le labo ? Si pas de pont de carbone alors CH5 ...",
    "Relation Process / Qualit√© carbone / apparition PC / √©rosion √©lectrode / temp√©rature": "- Finir le plan de test Temp√©rature - T240 et T241 √† 1200 et 1300¬∞C - Tester d'autres param√®tres : pression √† 300mbar dans le R√©acteur ou le convertisseur (√† quel point est ce d√©favorable?) Fr√©quence gap tension - Contr√¥le du temps de s√©jour dans le four (Mouffle) : Mod√©lisation du four pour le gas mixing, Gaz traceur pour obtenir les temps de s√©jour observ√©s (distrib de temps de s√©jour), Possibilit√© de modification",
    "Que se passe-t-il dans le haut de la torche?": "Peut-on noyer le T8 dans le r√©fractaire ou faut-il lui laisser de la libert√© pour respirer? Qu'est-ce qui se passe √† l'horizontal ou en diagonale? - Compo gaz? -> d√©cantation hydrog√®ne vs CH-CHOC - Impact du 'vide' sur la formation des PC (combler avec de la cera blanket, monter une vieille c√©ramique ...) - LABO - test en horizontal.",
    "MONITORING syst√®me/zone dans cockpit": "D√©velopper des vues dans le temps par syst√®me (filtration / convertisseur / plasmalyse / analyse) qui remontent les informations cl√©s pour MONITORER les √©quipements (ANALYSER et ANTICIPER les pannes): - Des √©v√®nements de type s√©curit√© - Des √©tats (nombre d'heures de fonctionnement par sous ensemble) - Des observations utilisateur (pont de carbone, changement de pi√®ces etc...) But c'est de monter en comp√©tence de pilotage pour SPRING (infos cl√©s √† remonter hors de SCADA). Si suivi en temps r√©el exemple : vue par zone des alarmes. Les consignations",
    "Tester les √©lectrodes en graphite": "Pr√© requis 11 et surtout 10. Stabilit√© des GAP, stabilit√© en r√©g√©n√©ration CO2 etc... Enjeux : √©lectrodes de spring et carbone conducteur (impuret√© m√©talliques)",
    "Optimisation SEO de la T8": "Pr√©pare les m√©thodes de caract√©risation des torches de SPRING + param√©trage des syst√®mes pendant la chauffe et la production. Trouver une m√©thode exp√©rimentale pour obtenir la SEO d'une torche T8, l'impl√©menter dans CH5 et dans cockpit (vue syst√®me). Tester des param√®tres √† notre disposition : - Gap - D√©bit/ pression - Compo gaz (N2, H2, CH4, ....) - Pousser les g√©n√©rateurs √† 100KHz",
    "Tester la bande de temp√©rature de Victor": "????",
    "Nouveaux syst√®mes de filtration nanoparticule": "Des cyclones haute vitesse. Filtration √©lectrostatique. Refroidissement ou pas par l'√©changeur. Banc de test PAL. pot √† carbone. En delta par rapport au BF310 en rendement, en analyse granul, en perte de charge",
    "Battre des records de dur√©e": "Communication. Savoir comment √ßa se comporte en fonctionnement continu -> truc de fin de campagne (car il faut qu'Eric soit 100% op√©rationnel + helpers)",
    "Caract√©riser impuret√©s dans le gaz a diff√©rentes √©tapes process": "- Savoir pr√©lever du gaz sale, chaud-froid, g√©rer l'ATEX et la g√©om√©trie des points de pr√©l√®vements... - Savoir analyser les particules (distribution, HAP etc...) - Savoir trouver de struc inattendu (poussi√®re de r√©fractaire, oxyde m√©talliques, soufre etc..) - Gestion des √©chantillons avec des labos externes etc... Mise au point des m√©thodes d'√©chantillonnage et d'analyse pour SPRING.",
    "Miscibilit√© CH4 ‚Äì H2": "Selon les √©coulements et la temp√©rature ???",
    "Tester les impuret√©s du feedstock": "Vapeur d'eau, √©thane, mercaptans, CO2, azote, H2 - Impact sur la durabilit√© des √©lectrodes - Impact sur la d√©tection pont de carbone - Impact sur la r√©gulation de mani√®re g√©n√©rale (UGF etc...) - Structure du carbone de plasmalyse (graph√®ne?)",
    "√âtanch√©ification presse √©toupe des r√©sistances du convertisseur": "Aide pour le bilan mati√®re - Capot pressuris√© en azote √† 20mbar mini et presse √©toupe pour les c√¢bles (ATEX zone 1 dans la bo√Æte)",
    "Combustion des gaz de CH5": "Savoir designer, implanter et op√©rer une torch√®re. Designer et op√©rer une torche pour CH5 - Engineering - Impacts s√©curit√© (plan de pr√©vention etc...) - Am√©liorer les performances environnementales de CH5 - Tester le r√©sidu carbone (pluging br√ªleur)",
    "Tester des pr√©curseurs dans le feedstock": "- Pr√©curseurs ferreux pour des nanotubes - KOH pour modifier la structure des agr√©gats. - Savoir injecter dans le feedstock - Monitorer les impacts durabilit√© / fiabilit√© etc.... - Cf 23 mais avec des liquides ou des solides plut√¥t que des gaz.",
    "Breveter la T8": "Cf 21",
    "M√©lange nanotubes de carbone et CB du four": "Test pour le carbone conducteur.",
    "Post-traitement du carbone": "- √âlimination des HAP - Broyage - Fonctionnalisation en extrudeuse r√©active - Granulation - S√©chage - √âlastom√®res pr√™t √† l'emploi - Fonctionnalisation carbone in situ : injection haute temp√©rature d'adjuvant via TT30X",
    "Tests de nouveaux g√©n√©rateurs / pilote carbone": "Faisabilit√© √† regarder en fonction des g√©n√©rateurs concern√©s - Mesures de s√©curit√© - Modification AF - Disponibilit√© torche etc... - Pr√© tests en labo.",
    "S√©paration / purification du dihydrog√®ne": "Trouver une membrane basse pression?",
    "S√©parer l'ac√©tyl√®ne en sortie de plasma": "Semble excessivement difficile (carbone etc...)",
    "Nettoyage du convertisseur vapeur/CO2": "Injection de vapeur en amont du four. Int√©r√™t pour SPRING. Risque de choc thermique aux r√©sistances et r√©fractaire. Impact sur le carbone etc...",
    "Injection directe de plasma dans le four": "Attention aux chicanes -> utiliser un TT. Mise en place d'une cellule plasma en ext√©rieur (√©lectricit√©, du gaz)."
}

# Configuration des tokens de vote par utilisateur
TOKENS_CONFIG = {
    "votes_5": 3,  # 3 votes √† 5/5
    "votes_4": 5,  # 5 votes √† 4/5  
    "votes_3": 10, # 10 votes √† 3/5
    "votes_2": 15, # 15 votes √† 2/5
    "votes_1": 20  # 20 votes √† 1/5
}

def github_api_request(method, endpoint, data=None):
    """Effectue une requ√™te √† l'API GitHub"""
    try:
        github_owner = st.secrets.get("github_owner", "")
        github_repo = st.secrets.get("github_repo", "")
        github_token = st.secrets.get("github_token", "")
        
        if not all([github_owner, github_repo, github_token]):
            st.error("Configuration GitHub incompl√®te dans les secrets")
            return None
            
        url = f"https://api.github.com/repos/{github_owner}/{github_repo}/contents/{endpoint}"
        headers = {
            "Authorization": f"token {github_token}",
            "Accept": "application/vnd.github.v3+json"
        }
        
        if method == "GET":
            response = requests.get(url, headers=headers)
        elif method == "PUT":
            response = requests.put(url, headers=headers, json=data)
        
        return response
    except Exception as e:
        st.error(f"Erreur API GitHub : {e}")
        return None

def load_from_github(filename):
    """Charge un fichier depuis GitHub"""
    try:
        response = github_api_request("GET", filename)
        if response and response.status_code == 200:
            content = response.json()["content"]
            decoded_content = base64.b64decode(content).decode('utf-8')
            return json.loads(decoded_content)
        return {}
    except Exception as e:
        st.error(f"Erreur chargement {filename} : {e}")
        return {}

def save_to_github(filename, data):
    """Sauvegarde un fichier sur GitHub"""
    try:
        # R√©cup√©rer le SHA du fichier existant
        response = github_api_request("GET", filename)
        sha = response.json().get("sha") if response and response.status_code == 200 else None
        
        # Pr√©parer les donn√©es
        content = base64.b64encode(json.dumps(data, ensure_ascii=False, indent=2).encode('utf-8')).decode('utf-8')
        
        github_branch = st.secrets.get("github_branch", "main")
        payload = {
            "message": f"Update {filename} - {datetime.now().isoformat()}",
            "content": content,
            "branch": github_branch
        }
        
        if sha:
            payload["sha"] = sha
        
        response = github_api_request("PUT", filename, payload)
        return response and response.status_code in [200, 201]
    except Exception as e:
        st.error(f"Erreur sauvegarde {filename} : {e}")
        return False

def load_data():
    """Charge les donn√©es de votes, utilisateurs et t√¢ches"""
    if st.secrets.get("use_github", False):
        votes = load_from_github("votes_spring_meeting.json")
        users = load_from_github("users_spring_meeting.json") 
        additional_tasks = load_from_github("tasks_spring_meeting.json")
    else:
        # Fallback local pour d√©veloppement
        votes = {}
        users = {}
        additional_tasks = []
        
        for filename, default in [("votes_spring_meeting.json", {}), 
                                ("users_spring_meeting.json", {}),
                                ("tasks_spring_meeting.json", [])]:
            if os.path.exists(filename):
                try:
                    with open(filename, 'r', encoding='utf-8') as f:
                        data = json.load(f)
                        if filename == "votes_spring_meeting.json":
                            votes = data
                        elif filename == "users_spring_meeting.json":
                            users = data
                        else:
                            additional_tasks = data
                except:
                    pass
    
    return votes, users, additional_tasks

def save_data(votes, users, additional_tasks):
    """Sauvegarde toutes les donn√©es"""
    if st.secrets.get("use_github", False):
        save_to_github("votes_spring_meeting.json", votes)
        save_to_github("users_spring_meeting.json", users)
        save_to_github("tasks_spring_meeting.json", additional_tasks)
    else:
        # Sauvegarde locale
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        for filename, data in [("votes_spring_meeting.json", votes), 
                             ("users_spring_meeting.json", users), 
                             ("tasks_spring_meeting.json", additional_tasks)]:
            try:
                if os.path.exists(filename):
                    backup_name = f"{filename}.backup_{timestamp}"
                    os.rename(filename, backup_name)
                
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(data, f, ensure_ascii=False, indent=2)
            except:
                pass

def get_user_tokens(user_id, users):
    """R√©cup√®re les tokens restants pour un utilisateur"""
    if user_id not in users:
        users[user_id] = {
            "name": f"Utilisateur_{user_id[:8]}",
            "tokens": TOKENS_CONFIG.copy(),
            "created_at": datetime.now().isoformat()
        }
    return users[user_id]["tokens"]

def format_text_for_hover(text, line_width=90):
    """Formate le texte pour l'affichage hover avec retours √† la ligne intelligents"""
    if not text or len(text) <= line_width:
        return text
    
    sentences = text.replace('. ', '.|').replace('? ', '?|').replace('! ', '!|').split('|')
    formatted_lines = []
    current_line = ""
    
    for sentence in sentences:
        sentence = sentence.strip()
        if not sentence:
            continue
            
        if len(current_line + sentence) <= line_width:
            current_line += sentence
        else:
            if current_line.strip():
                formatted_lines.append(current_line.strip())
            
            if len(sentence) > line_width:
                words = sentence.split()
                current_line = ""
                for word in words:
                    if len(current_line + " " + word) <= line_width:
                        current_line += (" " if current_line else "") + word
                    else:
                        if current_line:
                            formatted_lines.append(current_line)
                        current_line = word
            else:
                current_line = sentence
    
    if current_line.strip():
        formatted_lines.append(current_line.strip())
    
    return "<br>".join(formatted_lines)

def get_real_description(task_name):
    """R√©cup√®re la vraie description d'une t√¢che par correspondance exacte"""
    if task_name in DESCRIPTIONS_REELLES:
        return DESCRIPTIONS_REELLES[task_name]
    return "Description √† compl√©ter selon les crit√®res SPRING"

@st.cache_data
def load_csv_data():
    """Charge les donn√©es CSV depuis GitHub (version simplifi√©e et fiable)"""
    try:
        # URL Raw directe - SANS ACCENTS dans les noms de colonnes
        csv_url = "https://raw.githubusercontent.com/liloman25879/spring-vote-app/main/evaluation_taches_spring.csv"
        df = pd.read_csv(csv_url, sep=';', encoding='iso-8859-1')
        
        # Debug : afficher les colonnes pour v√©rification
        st.success(f"‚úÖ CSV charg√© : {len(df)} t√¢ches")
        
        # Nettoyer les donn√©es num√©riques (gestion robuste des virgules)
        numeric_cols = ['Cout', 'Score_Prix', 'Score_Complexite', 'Score_Interet', 'Score_Total']
        for col in numeric_cols:
            if col in df.columns:
                df[col] = df[col].astype(str).str.replace(',', '.').astype(float)
        
        return df
    except Exception as e:
        st.error(f"‚ùå Erreur chargement CSV : {e}")
        return None

def get_all_tasks(df, additional_tasks):
    """Combine les t√¢ches du CSV et les nouvelles t√¢ches propos√©es"""
    all_tasks = []
    
    # T√¢ches du CSV - NOMS DE COLONNES SANS ACCENTS
    for _, row in df.iterrows():
        all_tasks.append({
            'name': row['Nouveau_Nom'],
            'description': get_real_description(row['Nouveau_Nom']),
            'cost_score': float(row['Score_Prix']),
            'complexity_score': float(row['Score_Complexite']),  # ‚Üê SANS ACCENT
            'interest_score': float(row['Score_Interet']),       # ‚Üê SANS ACCENT
            'total_score': float(row['Score_Total']),
            'source': 'csv',
            'id': f"csv_{row['Nouveau_Nom']}"
        })
    
    # Nouvelles t√¢ches propos√©es
    for task in additional_tasks:
        all_tasks.append({
            'name': task['name'],
            'description': task['description'],
            'cost_score': float(task['cost']),
            'complexity_score': float(task['complexity']),
            'interest_score': float(task['interest']),
            'total_score': (float(task['cost']) + float(task['complexity']) + float(task['interest'])) / 3,
            'source': 'proposed',
            'proposed_by': task['proposed_by'],
            'id': task['id']
        })
    
    # Trier par nom pour avoir un ordre fixe
    all_tasks.sort(key=lambda x: x['name'].lower())
    
    return all_tasks

def main():
    st.title("üó≥Ô∏è SPRING - Vote Collaboratif Cloud")
    
    # V√©rification de la configuration
    if st.secrets.get("use_github", False):
        st.success("üåê Mode Cloud activ√© - Donn√©es synchronis√©es")
    else:
        st.info("üíª Mode Local - Ajoutez les secrets pour le mode cloud")
    
    st.markdown("---")
    
    # Charger les donn√©es
    votes, users, additional_tasks = load_data()
    df = load_csv_data()
    
    if df is None:
        st.error("‚ùå Impossible de charger les donn√©es CSV. V√©rifiez la configuration.")
        return
    
    # Obtenir toutes les t√¢ches (CSV + nouvelles)
    all_tasks = get_all_tasks(df, additional_tasks)
    
    # Sidebar pour le syst√®me de vote
    with st.sidebar:
        st.header("üéØ Syst√®me de Vote")
        
        # Identification utilisateur
        user_name = st.text_input("Votre nom :", placeholder="Entrez votre nom")
        
        if user_name:
            user_id = str(uuid.uuid5(uuid.NAMESPACE_DNS, user_name))
            user_tokens = get_user_tokens(user_id, users)
            users[user_id]["name"] = user_name
            
            st.success(f"Connect√© : {user_name}")
            
            # Affichage des tokens restants
            st.subheader("ü™ô Vos tokens restants :")
            col1, col2 = st.columns(2)
            with col1:
                st.write(f"**{user_tokens['votes_5']}** votes ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê")
                st.write(f"**{user_tokens['votes_4']}** votes ‚≠ê‚≠ê‚≠ê‚≠ê")
                st.write(f"**{user_tokens['votes_3']}** votes ‚≠ê‚≠ê‚≠ê")
            with col2:
                st.write(f"**{user_tokens['votes_2']}** votes ‚≠ê‚≠ê")
                st.write(f"**{user_tokens['votes_1']}** votes ‚≠ê")
            
            st.markdown("---")
            
            # Interface de vote avec ordre fixe
            st.subheader("üìä Vote Collectif - Ordre Fixe")
            
            # Initialiser l'index de la t√¢che actuelle dans session_state
            if 'current_task_index' not in st.session_state:
                st.session_state.current_task_index = 0
            
            # S'assurer que l'index est dans les limites
            if st.session_state.current_task_index >= len(all_tasks):
                st.session_state.current_task_index = 0
            
            current_task = all_tasks[st.session_state.current_task_index]
            
            # Navigation
            col1, col2, col3 = st.columns([1, 2, 1])
            with col1:
                if st.button("‚¨ÖÔ∏è Pr√©c√©dent", disabled=st.session_state.current_task_index == 0):
                    st.session_state.current_task_index -= 1
                    st.rerun()
            
            with col2:
                st.write(f"**T√¢che {st.session_state.current_task_index + 1}/{len(all_tasks)}**")
            
            with col3:
                if st.button("‚û°Ô∏è Suivant", disabled=st.session_state.current_task_index == len(all_tasks) - 1):
                    st.session_state.current_task_index += 1
                    st.rerun()
            
            # Aller directement √† une t√¢che
            task_names = [task['name'] for task in all_tasks]
            selected_index = st.selectbox(
                "Aller √† :", 
                range(len(task_names)),
                format_func=lambda x: f"{x+1}. {task_names[x]}",
                index=st.session_state.current_task_index,
                key="task_selector"
            )
            
            if selected_index != st.session_state.current_task_index:
                st.session_state.current_task_index = selected_index
                st.rerun()
            
            # Affichage de la t√¢che actuelle
            st.markdown("---")
            st.subheader(f"üéØ {current_task['name']}")
            
            # Badge pour les nouvelles t√¢ches
            if current_task['source'] == 'proposed':
                st.markdown(f"üÜï **Nouvelle t√¢che** propos√©e par *{current_task['proposed_by']}*")
            
            # Description
            st.text_area("Description :", current_task['description'], height=120, disabled=True)
            
            # Scores actuels
            st.write("**Scores actuels :**")
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Co√ªt", f"{current_task['cost_score']:.1f}/5")
            with col2:
                st.metric("Complexit√©", f"{current_task['complexity_score']:.1f}/5")
            with col3:
                st.metric("Int√©r√™t", f"{current_task['interest_score']:.1f}/5")
            
            # V√©rifier les votes existants pour cette t√¢che
            existing_votes = []
            if current_task['name'] in votes and user_id in votes[current_task['name']]:
                existing_votes = votes[current_task['name']][user_id]
            
            if existing_votes:
                st.info(f"Vous avez d√©j√† vot√© : {[v['score'] for v in existing_votes]}")
            
            # Boutons de vote
            st.subheader("Voter :")
            vote_cols = st.columns(5)
            
            for i, (vote_type, remaining) in enumerate(user_tokens.items()):
                vote_value = int(vote_type.split('_')[1])
                
                with vote_cols[i]:
                    stars = "‚≠ê" * vote_value
                    
                    if remaining > 0:
                        if st.button(f"{stars}\n({remaining})", key=f"vote_{vote_value}_{current_task['name']}", use_container_width=True):
                            # Enregistrer le vote
                            if current_task['name'] not in votes:
                                votes[current_task['name']] = {}
                            if user_id not in votes[current_task['name']]:
                                votes[current_task['name']][user_id] = []
                            
                            votes[current_task['name']][user_id].append({
                                "score": vote_value,
                                "timestamp": datetime.now().isoformat(),
                                "user_name": user_name
                            })
                            
                            # D√©cr√©menter le token
                            users[user_id]["tokens"][vote_type] -= 1
                            
                            # Sauvegarder
                            save_data(votes, users, additional_tasks)
                            
                            st.success(f"Vote enregistr√© : {vote_value}/5")
                            st.rerun()
                    else:
                        st.button(f"{stars}\n(0)", disabled=True, key=f"vote_disabled_{vote_value}_{current_task['name']}", use_container_width=True)
        
        st.markdown("---")
        
        # Section pour ajouter une nouvelle t√¢che
        st.subheader("‚ûï Proposer une nouvelle t√¢che")
        
        with st.form("new_task_form"):
            new_task_name = st.text_input("Nom de la t√¢che :")
            new_task_desc = st.text_area("Description d√©taill√©e :")
            
            col1, col2, col3 = st.columns(3)
            with col1:
                new_cost = st.slider("Co√ªt", 1, 5, 3)
            with col2:
                new_complexity = st.slider("Complexit√©", 1, 5, 3)
            with col3:
                new_interest = st.slider("Int√©r√™t", 1, 5, 3)
            
            submitted = st.form_submit_button("üöÄ Proposer la t√¢che")
            
            if submitted and new_task_name and new_task_desc and user_name:
                new_task = {
                    "id": str(uuid.uuid4()),
                    "name": new_task_name,
                    "description": new_task_desc,
                    "cost": new_cost,
                    "complexity": new_complexity,
                    "interest": new_interest,
                    "proposed_by": user_name,
                    "timestamp": datetime.now().isoformat()
                }
                
                additional_tasks.append(new_task)
                save_data(votes, users, additional_tasks)
                
                st.success(f"Nouvelle t√¢che propos√©e : '{new_task_name}'")
                st.rerun()
    
    # Zone principale - Visualisation
    main_col1, main_col2 = st.columns([2, 1])
    
    with main_col1:
        st.subheader("üìà Visualisation 3D des T√¢ches SPRING")
        
        # Cr√©er un DataFrame combin√© pour la visualisation
        combined_data = []
        
        for task in all_tasks:
            # Calculer le score d'int√©r√™t avec les votes
            interest_score = task['interest_score']
            if task['name'] in votes:
                all_votes = []
                for user_votes in votes[task['name']].values():
                    all_votes.extend([v["score"] for v in user_votes])
                
                if all_votes:
                    interest_score = sum(all_votes) / len(all_votes)
            
            combined_data.append({
                'Nouveau_Nom': task['name'],
                'Score_Prix': task['cost_score'],
                'Score_Complexite': task['complexity_score'],  # ‚Üê SANS ACCENT
                'Score_Interet': interest_score,                # ‚Üê SANS ACCENT
                'Score_Total': (task['cost_score'] + task['complexity_score'] + interest_score) / 3,
                'Source': task['source'],
                'Description': task['description'],
                'Task_ID': task.get('id', task['name'])
            })
        
        df_display = pd.DataFrame(combined_data)
        
        # Cr√©er le graphique 3D avec distinction visuelle pour les nouvelles t√¢ches
        fig = px.scatter_3d(
            df_display,
            x='Score_Prix',
            y='Score_Complexite',  # ‚Üê SANS ACCENT
            z='Score_Interet',     # ‚Üê SANS ACCENT
            size='Score_Total',
            color='Source',
            color_discrete_map={'csv': 'blue', 'proposed': 'red'},
            hover_name='Nouveau_Nom',
            size_max=20,
            title="√âvaluation 3D des T√¢ches SPRING (üîµ Originales | üî¥ Nouvelles)"
        )
        
        # Enrichir les informations de hover - CORRECTION MAJEURE
        hover_text = []
        for index, row in df_display.iterrows():
            task_name = row['Nouveau_Nom']
            
            # SOLUTION : Rechercher la t√¢che dans all_tasks par nom exact
            original_task = None
            for task in all_tasks:
                if task['name'] == task_name:
                    original_task = task
                    break
            
            # Utiliser les vraies donn√©es de la t√¢che
            if original_task:
                description = original_task['description']
                display_name = original_task['name']
            else:
                # Fallback si pas trouv√©
                description = "Description non trouv√©e"
                display_name = task_name
            
            formatted_desc = format_text_for_hover(description)
            
            # Compter les votes
            vote_count = 0
            if task_name in votes:
                for user_votes in votes[task_name].values():
                    vote_count += len(user_votes)
            
            # Badge pour les nouvelles t√¢ches
            source_badge = "üÜï NOUVELLE" if row['Source'] == 'proposed' else "üìã ORIGINALE"
            
            hover_info = f"""
<b>{display_name}</b><br>
<b>{source_badge}</b><br>
<br>
<b>Scores :</b><br>
‚Ä¢ Co√ªt : {row['Score_Prix']:.1f}/5<br>
‚Ä¢ Complexit√© : {row['Score_Complexite']:.1f}/5<br>
‚Ä¢ Int√©r√™t : {row['Score_Interet']:.1f}/5<br>
‚Ä¢ <b>Total : {row['Score_Total']:.1f}/5</b><br>
<br>
<b>Votes re√ßus : {vote_count}</b><br>
<br>
<b>Description :</b><br>
{formatted_desc}
<extra></extra>"""
            hover_text.append(hover_info)
        
        fig.update_traces(hovertemplate=hover_text)
        
        # Am√©liorer l'apparence
        fig.update_layout(
            height=600,
            scene=dict(
                xaxis_title="Co√ªt (Prix)",
                yaxis_title="Complexit√©", 
                zaxis_title="Int√©r√™t",
                bgcolor="rgba(0,0,0,0)"
            ),
            paper_bgcolor="rgba(0,0,0,0)",
            plot_bgcolor="rgba(0,0,0,0)"
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    with main_col2:
        st.subheader("üìä Statistiques de Vote")
        
        # Statistiques g√©n√©rales
        total_votes = sum(len(task_votes) for task_votes in votes.values() for task_votes in task_votes.values())
        st.metric("Total des votes", total_votes)
        st.metric("Participants", len(users))
        st.metric("Nouvelles t√¢ches propos√©es", len(additional_tasks))
        
        # Affichage de la t√¢che actuelle dans le vote collectif
        if user_name and 'current_task_index' in st.session_state:
            current_task = all_tasks[st.session_state.current_task_index]
            st.info(f"**Vote collectif :**\nT√¢che {st.session_state.current_task_index + 1}/{len(all_tasks)}\n*{current_task['name']}*")
        
        # Top des t√¢ches vot√©es
        if votes:
            st.subheader("üèÜ Top des t√¢ches")
            task_vote_counts = {}
            for task_name, task_votes in votes.items():
                count = sum(len(user_votes) for user_votes in task_votes.values())
                if count > 0:
                    avg_score = sum(vote["score"] for user_votes in task_votes.values() for vote in user_votes) / count
                    task_vote_counts[task_name] = {"count": count, "avg_score": avg_score}
            
            # Trier par nombre de votes puis par score moyen
            sorted_tasks = sorted(task_vote_counts.items(), 
                                key=lambda x: (x[1]["count"], x[1]["avg_score"]), 
                                reverse=True)
            
            for i, (task_name, stats) in enumerate(sorted_tasks[:10]):
                # Emoji pour distinguer les nouvelles t√¢ches
                is_new = any(task['name'] == task_name and task['source'] == 'proposed' for task in all_tasks)
                emoji = "üÜï" if is_new else "üìã"
                
                st.write(f"**{i+1}.** {emoji} {task_name}")
                st.write(f"   üìä {stats['count']} votes - ‚≠ê {stats['avg_score']:.1f}/5")
        
        # Nouvelles t√¢ches propos√©es
        if additional_tasks:
            st.subheader("üí° Nouvelles t√¢ches propos√©es")
            for task in additional_tasks[-5:]:  # 5 derni√®res
                st.write(f"**{task['name']}**")
                st.write(f"   Par: {task['proposed_by']}")
                st.write(f"   üí∞{task['cost']} üîß{task['complexity']} ‚≠ê{task['interest']}")
        
        # Section d'export des r√©sultats
        st.markdown("---")
        st.subheader("üì• Export des R√©sultats")
        
        if st.button("üìä T√©l√©charger les R√©sultats CSV"):
            # Cr√©er un CSV avec tous les r√©sultats
            results_data = []
            for task in all_tasks:
                task_votes = votes.get(task['name'], {})
                total_votes_task = sum(len(user_votes) for user_votes in task_votes.values())
                if total_votes_task > 0:
                    avg_score = sum(vote["score"] for user_votes in task_votes.values() for vote in user_votes) / total_votes_task
                else:
                    avg_score = 0
                
                results_data.append({
                    'T√¢che': task['name'],
                    'Source': 'Nouvelle' if task['source'] == 'proposed' else 'Originale',
                    'Co√ªt_Initial': task['cost_score'],
                    'Complexit√©_Initial': task['complexity_score'],
                    'Int√©r√™t_Initial': task['interest_score'],
                    'Score_Vot√©_Moyen': avg_score,
                    'Nombre_Votes': total_votes_task,
                    'Description': task['description'][:100] + '...' if len(task['description']) > 100 else task['description']
                })
            
            results_df = pd.DataFrame(results_data)
            csv = results_df.to_csv(index=False, encoding='utf-8-sig', sep=';')
            
            st.download_button(
                label="üíæ T√©l√©charger R√©sultats.csv",
                data=csv,
                file_name=f"resultats_vote_spring_{datetime.now().strftime('%Y%m%d_%H%M')}.csv",
                mime="text/csv"
            )

if __name__ == "__main__":
    main()